// Generated by CoffeeScript 1.3.1
var SyncView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

SyncView = (function(_super) {

  __extends(SyncView, _super);

  SyncView.name = 'SyncView';

  function SyncView() {
    this.update = __bind(this.update, this);

    this.render = __bind(this.render, this);
    return SyncView.__super__.constructor.apply(this, arguments);
  }

  SyncView.prototype.initialize = function() {
    return this.sync = new Sync();
  };

  SyncView.prototype.el = '#content';

  SyncView.prototype.render = function() {
    this.$el.html("        <h2>Cloud Server: <span class='sync-target'>" + (this.sync.target()) + "</span></h2>        <a href='#sync/send'>Send data (last done: <span class='sync-sent-status'></span>)</a>        <a href='#sync/get'>Get data (last done: <span class='sync-get-status'></span>)</a>        ");
    $("a").button();
    return this.update();
  };

  SyncView.prototype.update = function() {
    var _this = this;
    return this.sync.fetch({
      success: function() {
        $(".sync-sent-status").html(_this.sync.last_send_time());
        return $(".sync-get-status").html(_this.sync.last_get_time());
      },
      error: function() {
        _this.sync.save();
        return _.delay(_this.update, 1000);
      }
    });
  };

  return SyncView;

})(Backbone.View);
